// Renders the aerial perspective LUT, which is a 3D LUT.
// This compute shader requires camera parameters, and essentially slices the
// view frustum into several layers of the 3D LUT, with each layer representing
// the atmospheric scattering clamped to that depth value. For improved nearby
// variation, this uses a squared factor when computing slice distances. The
// final 3D LUT texels are RGBA containing the RGB luminance, with A being a
// "unified opacity" derived as the average transmittance of the RGB components.

// NOTE: The shader source is dynamically loaded/parsed at runtime, so we don't
// add Godot's #[compute] hint to the top of the file (which would break
// shader_compile_spirv_from_source).
#version 450

#pragma include "res://atmosphere/common.glsl.inc"

// Perform work in 8x8 == 64 local threads. For reference, NVIDIA warps are 32,
// AMD GPUs use 64.
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant, std430) uniform PushConstants {
  ivec3 texture_size;
  int raymarch_steps;
  float max_distance_km;
}
pc;

// TODO: These could just be a uniform buffer instead actually.
layout(set = 0, binding = 0, std430) restrict readonly buffer StorageBlock {
  AtmosphereParams params;
};

layout(set = 0, binding = 1) uniform UniformBlock { ViewParams view; };

layout(rgba32f, set = 0, binding = 2) uniform restrict writeonly image3D ap_lut;

layout(set = 0, binding = 3) uniform sampler2D transmittance_lut;
layout(set = 0, binding = 4) uniform sampler2D ms_lut;

float transmittance_to_opacity(vec3 transmittance) {
  // We compute transmittance per-color, so we have to combine them to get a
  // single opacity.
  return 1.0 - dot(transmittance, vec3(1.0 / 3.0));
}

void main() {
  ivec3 texture_size = pc.texture_size;
  ivec3 texel_coord = ivec3(gl_GlobalInvocationID.xyz);
  if (out_of_bounds(texel_coord, texture_size)) {
    return;
  }
  vec2 uv = texel_center_uv(texel_coord.xy, texture_size.xy);
  // Important: we flip the generated texture because the 3D LUT is used in a
  // Godot CompositorEffect, which has scene textures (color, depth) flipped in
  // order to better match common screen-space assumptions. If we didn't do
  // this, the aerial perspective effect would be upside down.
  uv.y = 1.0 - uv.y;

  // Compute camera pos relative to atmosphere origin. We treat the atmosphere
  // node's position as the surface of the ground. If the camera is
  // "underground", clamp to a non-zero small number to avoid weird artifacts.
  vec3 camera_pos_km =
      (view.camera_position - view.atmosphere_origin_position) * 1e-3;
  camera_pos_km.y = max(camera_pos_km.y, 0.001);

  // Convert local camera pos to earth pos.
  vec3 earth_pos_km = camera_pos_km + vec3(0.0, params.ground_radius_km, 0.0);
  vec3 ray_dir = screen_uv_to_world_dir(uv, view);

  float dist_factor =
      (float(texel_coord.z) + OFFSET_AP_LAYER) / float(texture_size.z);
  // Use a squared distribution so that more of the layers are closer to the
  // camera, where all the detail matters.
  dist_factor *= dist_factor;
  float max_dist = dist_factor * pc.max_distance_km;

  SkyResult sky =
      raymarch_sky(earth_pos_km, ray_dir, view.sun_direction, pc.raymarch_steps,
                   max_dist, params, transmittance_lut, ms_lut);
  vec4 color = vec4(sky.luminance, transmittance_to_opacity(sky.transmittance));
  imageStore(ap_lut, texel_coord, color);
}