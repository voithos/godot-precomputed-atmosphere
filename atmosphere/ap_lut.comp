
// NOTE: The shader source is dynamically loaded/parsed at runtime, so we don't
// add Godot's #[compute] hint to the top of the file (which would break
// shader_compile_spirv_from_source).
#version 450

#pragma include "res://atmosphere/common.glsl.inc"

// Perform work in 8x8 == 64 local threads. For reference, NVIDIA warps are 32,
// AMD GPUs use 64.
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant, std430) uniform PushConstants {
  ivec3 texture_size;
  int raymarch_steps;
  float max_distance_km;
}
pc;

// TODO: These could just be a uniform buffer instead actually.
layout(set = 0, binding = 0, std430) restrict readonly buffer StorageBlock {
  AtmosphereParams params;
};

layout(set = 0, binding = 1) uniform UniformBlock { CameraParams camera; };

layout(rgba32f, set = 0, binding = 2) uniform restrict writeonly image3D ap_lut;

layout(set = 0, binding = 3) uniform sampler2D transmittance_lut;
layout(set = 0, binding = 4) uniform sampler2D ms_lut;

void main() {
  ivec3 texture_size = pc.texture_size;
  ivec3 texel_coord = ivec3(gl_GlobalInvocationID.xyz);
  if (out_of_bounds(texel_coord, texture_size)) {
    return;
  }
  vec2 uv = texel_center_uv(texel_coord.xy, texture_size.xy);

  // We treat y=0 as the surface of the ground. If the camera is "underground",
  // clamp to a non-zero small number to avoid weird artifacts.
  vec3 camera_pos_km = camera.position * 1e-3;
  camera_pos_km.y = max(camera_pos_km.y, 0.1);

  // TODO: Create the ray based on camera transforms.
  vec3 ray_dir = vec3(0.0, 0.0, -1.0);

  // Convert local camera pos to earth pos.
  vec3 earth_pos_km = camera_pos_km + vec3(0.0, params.ground_radius_km, 0.0);
  SkyResult sky =
      raymarch_sky(earth_pos_km, ray_dir, camera.sun_direction,
                   pc.raymarch_steps, params, transmittance_lut, ms_lut);
  vec4 color = vec4(sky.luminance, 1.0);
  // Temp, just to make sure the slices are working.
  color = vec4(uv, 0.0, 1.0);
  imageStore(ap_lut, texel_coord, color);
}