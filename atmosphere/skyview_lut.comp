// Renders the skyview LUT, parameterized by UV with U representing
// azimuth angle, and V representing non-linear altitude. U=0.5 points in the
// positive-X direction, V=0.5 is parameterized to always be the horizon,
// regardless of camera height. This is based on the paper 'A Scalable and
// Production Ready Sky and Atmosphere Rendering Technique' by Sebastien
// Hillaire. The resulting LUT texels will contain the final sky luminance.

// NOTE: The shader source is dynamically loaded/parsed at runtime, so we don't
// add Godot's #[compute] hint to the top of the file (which would break
// shader_compile_spirv_from_source).
#version 450

#pragma include "res://atmosphere/common.glsl.inc"

// Perform work in 8x8 == 64 local threads. For reference, NVIDIA warps are 32,
// AMD GPUs use 64.
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant, std430) uniform PushConstants {
  ivec2 texture_size;
  int raymarch_steps;
  vec3 camera_position;
  vec3 sun_direction;
}
pc;

layout(set = 0, binding = 0, std430) restrict readonly buffer StorageBlock {
  AtmosphereParams params;
}
stor;

layout(rgba32f, set = 0, binding = 1) uniform
    restrict writeonly image2D skyview_lut;

layout(set = 0, binding = 2) uniform sampler2D transmittance_lut;
layout(set = 0, binding = 3) uniform sampler2D ms_lut;

void main() {
  ivec2 texture_size = pc.texture_size;
  ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
  if (out_of_bounds(texel_coord, texture_size)) {
    return;
  }
  vec2 uv = texel_center_uv(texel_coord, texture_size);

  // We treat y=0 as the surface of the ground. If the camera is "underground",
  // clamp to a non-zero small number to avoid weird artifacts.
  vec3 camera_pos_km = pc.camera_position * 1e-3;
  camera_pos_km.y = max(camera_pos_km.y, 0.1);

  // Get azimuth-altitude angles based on the current UV, and use to generate a
  // ray to march.
  AzAlt aa = uv_to_az_alt(uv, camera_pos_km.y, stor.params.ground_radius_km);
  vec3 ray_dir = vec3(cos(aa.altitude) * cos(aa.azimuth), sin(aa.altitude),
                      cos(aa.altitude) * sin(aa.azimuth));

  // Convert local camera pos to earth pos.
  vec3 earth_pos_km =
      camera_pos_km + vec3(0.0, stor.params.ground_radius_km, 0.0);
  SkyResult sky =
      raymarch_sky(earth_pos_km, ray_dir, pc.sun_direction, pc.raymarch_steps,
                   stor.params, transmittance_lut, ms_lut);
  vec4 color = vec4(sky.luminance, 1.0);
  imageStore(skyview_lut, texel_coord, color);
}