
// NOTE: The shader source is dynamically loaded/parsed at runtime, so we don't
// add Godot's #[compute] hint to the top of the file (which would break
// shader_compile_spirv_from_source).
#version 450

#pragma include "res://atmosphere/common.glsl.inc"

// Perform work in 8x8 == 64 local threads. For reference, NVIDIA warps are 32,
// AMD GPUs use 64.
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant, std430) uniform PushConstants {
  ivec2 texture_size;
  int raymarch_steps;
  vec3 camera_position;
  vec3 sun_direction;
}
pc;

layout(set = 0, binding = 0, std430) restrict readonly buffer StorageBlock {
  AtmosphereParams params;
}
stor;

layout(rgba32f, set = 0, binding = 1) uniform
    restrict writeonly image2D skyview_lut;

layout(set = 0, binding = 2) uniform sampler2D transmittance_lut;
layout(set = 0, binding = 3) uniform sampler2D ms_lut;

void main() {
  ivec2 texture_size = pc.texture_size;
  ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
  if (out_of_bounds(texel_coord, texture_size)) {
    return;
  }
  vec2 uv = texel_center_uv(texel_coord, texture_size);
  vec4 color =
      vec4(texture(transmittance_lut, uv).rgb + vec3(0.5, 0.0, 0.0), 1.0);
  imageStore(skyview_lut, texel_coord, color);
}